import serial
import threading
import numpy as np

class ArduinoReader:
    """
    Threaded Arduino reader to continuously acquire FSR data.
    Exposes get_data() to retrieve latest sensor readings safely.
    """
    def __init__(self, port, baud=9600):
        self.ser = serial.Serial(port=port, baudrate=baud, timeout=1)
        self.lock = threading.Lock()
        self.data = None
        self.running = True
        self.thread = threading.Thread(target=self._read_serial, daemon=True)
        self.thread.start()
        
    def _read_serial(self):
        while self.running:
            if self.ser.in_waiting:
                line = self.ser.readline().decode('utf-8', errors='ignore').strip()
                if line and line.count(",") >= 3:  # 4 or more sensor values
                    try:
                        values = np.array([float(x) for x in line.split(",")[:4]])
                        with self.lock:
                            self.data = values
                    except ValueError:
                        continue

    def get_data(self):
        with self.lock:
            return self.data.copy() if self.data is not None else None

    def stop(self):
        self.running = False
        self.thread.join()
        self.ser.close()
